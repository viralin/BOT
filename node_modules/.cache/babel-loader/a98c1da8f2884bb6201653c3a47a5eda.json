{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\LENOVO\\\\react-bot\\\\src\\\\App.js\";\nimport React, { Component } from 'react';\nimport Pusher from 'pusher-js';\nimport './App.css';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleChange = event => {\n      this.setState({\n        userMessage: event.target.value\n      });\n    };\n\n    this.handleSubmit = event => {\n      event.preventDefault();\n      if (!this.state.userMessage.trim()) return;\n      const msg = {\n        text: this.state.userMessage,\n        user: 'human'\n      };\n      this.setState({\n        conversation: [...this.state.conversation, msg]\n      });\n      fetch('http://localhost:5000/chat', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          message: this.state.userMessage\n        })\n      });\n      this.setState({\n        userMessage: ''\n      });\n    };\n\n    this.state = {\n      userMessage: '',\n      conversation: []\n    };\n  }\n\n  componentDidMount() {\n    const pusher = new Pusher('c07325d02bbfcc9a8d0a', {\n      cluster: 'us2',\n      encrypted: true\n    });\n    const channel = pusher.subscribe('bot');\n    channel.bind('bot-response', data => {\n      const msg = {\n        text: data.message,\n        user: 'ai'\n      };\n      this.setState({\n        conversation: [...this.state.conversation, msg]\n      });\n    });\n  }\n\n  render() {\n    const ChatBubble = (text, i, className) => {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        key: `${className}-${i}`,\n        className: `${className} chat-bubble`,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        className: \"chat-content\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 15\n        }\n      }, text));\n    };\n\n    const chat = this.state.conversation.map((e, index) => ChatBubble(e.text, index, e.user));\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 13\n      }\n    }, \"React Chatbot\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"chat-window\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"conversation-view\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 15\n      }\n    }, chat), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"message-box\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"form\", {\n      onSubmit: this.handleSubmit,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      value: this.state.userMessage,\n      onInput: this.handleChange,\n      className: \"text-input\",\n      type: \"text\",\n      autoFocus: true,\n      placeholder: \"Type your message and hit Enter to send\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 19\n      }\n    })))));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["C:/Users/LENOVO/react-bot/src/App.js"],"names":["React","Component","Pusher","App","constructor","props","handleChange","event","setState","userMessage","target","value","handleSubmit","preventDefault","state","trim","msg","text","user","conversation","fetch","method","headers","body","JSON","stringify","message","componentDidMount","pusher","cluster","encrypted","channel","subscribe","bind","data","render","ChatBubble","i","className","chat","map","e","index"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\n    import Pusher from 'pusher-js';\n    import './App.css';\n\n    class App extends Component {\n      constructor(props) {\n        super(props);\n        this.state = {\n          userMessage: '',\n          conversation: [],\n        };\n      }\n\n      componentDidMount() {\n        const pusher = new Pusher('c07325d02bbfcc9a8d0a', {\n          cluster: 'us2',\n          encrypted: true,\n        });\n\n        const channel = pusher.subscribe('bot');\n        channel.bind('bot-response', data => {\n          const msg = {\n            text: data.message,\n            user: 'ai',\n          };\n          this.setState({\n            conversation: [...this.state.conversation, msg],\n          });\n        });\n      }\n\n      handleChange = event => {\n        this.setState({ userMessage: event.target.value });\n      };\n\n      handleSubmit = event => {\n        event.preventDefault();\n        if (!this.state.userMessage.trim()) return;\n\n        const msg = {\n          text: this.state.userMessage,\n          user: 'human',\n        };\n\n        this.setState({\n          conversation: [...this.state.conversation, msg],\n        });\n\n        fetch('http://localhost:5000/chat', {\n          method: 'POST',\n          headers: { 'Content-Type': 'application/json' },\n          body: JSON.stringify({\n            message: this.state.userMessage,\n          }),\n        });\n\n        this.setState({ userMessage: '' });\n      };\n\n      render() {\n        const ChatBubble = (text, i, className) => {\n          return (\n            <div key={`${className}-${i}`} className={`${className} chat-bubble`}>\n              <span className=\"chat-content\">{text}</span>\n            </div>\n          );\n        };\n\n        const chat = this.state.conversation.map((e, index) =>\n          ChatBubble(e.text, index, e.user)\n        );\n\n        return (\n          <div>\n            <h1>React Chatbot</h1>\n            <div className=\"chat-window\">\n              <div className=\"conversation-view\">{chat}</div>\n              <div className=\"message-box\">\n                <form onSubmit={this.handleSubmit}>\n                  <input\n                    value={this.state.userMessage}\n                    onInput={this.handleChange}\n                    className=\"text-input\"\n                    type=\"text\"\n                    autoFocus\n                    placeholder=\"Type your message and hit Enter to send\"\n                  />\n                </form>\n              </div>\n            </div>\n          </div>\n        );\n      }\n    }\n\n    export default App;"]},"metadata":{},"sourceType":"module"}